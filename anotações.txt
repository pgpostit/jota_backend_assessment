
// Atividade:
- Criar uma API REST com Python/Django/DREF. CRUD de notícias
- Criar autenticação (JWT) e perfis de usuário
- Criar um banco postgres ou mysql
- Criar os testes
- Testes automatizados e CI/CD
- Docker para deploy e execução local


// TODO:
1. Estrutura da API
* Desenvolver uma API REST utilizando Django e Django REST Framework.
* Criar endpoints para CRUD de notícias, com os seguintes atributos mínimos:
   * Título
   * Subtítulo
   * Imagem (upload)
   * Conteúdo
   * Data de publicação
   * Autor
   * Status (rascunho ou publicado) // 
* Definições de status:
   * Rascunho: Notícia salva por um editor, mas ainda não publicada.
   * Publicada: Notícia disponível para leitura.
* Funcionalidades adicionais:
   * Permitir o agendamento de publicações.
   * Categorizar notícias dentro das verticais: Poder, Tributos, Saúde, Energia e Trabalhista.
   * Definir se uma notícia será acessível a todos os leitores ou restrita a clientes PRO.
   * Definir a relação do cliente com o plano x Vertical. 
* Documentação da API: Implementação com Swagger.


2. Autenticação e Perfis de Usuário
* Implementar autenticação baseada em JWT para controle de acesso.
* Criar endpoints para:
   * Geração e renovação de tokens JWT.
   * Gerenciamento de usuários conforme os perfis abaixo:
      * Admin: Acesso total (criação, edição, exclusão e gerenciamento de usuários).
      * Editor: Pode criar, editar e excluir apenas suas próprias notícias.
      * Leitor: Pode visualizar apenas notícias publicadas, conforme o plano contratado.
* Um leitor terá acesso ao conteúdo conforme o plano contratado:
   * JOTA Info: Pode acessar notícias abertas para todos os usuários.
   * JOTA PRO: Tem acesso a conteúdos exclusivos de acordo com as verticais disponíveis no plano.
* As verticais disponíveis são: Poder, Tributos, Saúde, Energia e Trabalhista.
* Um plano pode incluir acesso a uma ou mais verticais.


3. Banco de Dados
* Utilização de PostgreSQL ou MySQL.
* Conhecimento básico em bancos NoSQL será considerado um diferencial.
4. Arquitetura e Processamento Assíncrono
* Implementar fila de processamento para tarefas demoradas (ex.: envio de e-mails de notificação).
* Utilizar arquitetura orientada a eventos para escalabilidade e desacoplamento dos serviços.
* Conhecimento em microsserviços será um diferencial.


5. Testes Automatizados e CI/CD
* Implementar testes unitários e de integração (pytest ou unittest) para garantir confiabilidade.
* Configurar um pipeline CI/CD com GitHub Actions para execução automática dos testes e deploy.
* Experiência com metodologias ágeis e integração/entrega contínua será um diferencial.


6. Infraestrutura e Deploy
* Criar um Dockerfile e um docker-compose.yml para facilitar a execução local.

Observações:
- Abstrações simples e eficientes
- Frameworks, bibliotecas e linguagens de forma eficaz e simpels, com familiaridade
- Boas práticas
- Segurança e escalabilidade